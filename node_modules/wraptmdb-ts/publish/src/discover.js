"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Discover = void 0;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) kwangsing3
 *
 * https://github.com/wrapTMDB/wrapTMDB-ts
 *
 */
const axios = require('axios');
const c_module = require("./common");
const baseURL = c_module.GetURL();
class Discover {
    /********************
     * 1./discover/movie
     * @description Discover movies by different types of data like average rating,
     * number of votes, genres and certifications.
     * You can get a valid list of certifications from the "certifications list" method.
     * @param {any} query
     * @example 'query' are more than 32 available properties.... see more in discover.ts
     * @returns JSON
     * @doc https://developers.themoviedb.org/3/discover/movie-discover
     ********************/
    async GetMovieDiscover(query) {
        const token = c_module.GetToken();
        const header = c_module.GetHeader();
        let targetURL = baseURL +
            c_module.Route.DISCOVER +
            c_module.Route.MOVIE +
            `?api_key=${token}`;
        const defauquery = {
            language: 'en-US',
            sort_by: 'popularity.desc',
            page: 1,
            include_adult: false,
            include_video: false,
            with_watch_monetization_types: 'flatrate',
        };
        targetURL += StringByQuery(query === undefined || query === {} ? defauquery : query);
        if (token === 'UnitTest_api_key') {
            return targetURL;
        }
        const data = await axios.get(targetURL, header);
        return data.data;
    }
    /*
      @example movieQuery{
          "language":{string},
          "region":{string},
          "sort_by":{string},
          "certification_country":{string},
          "certification":{string},
          "certification.lte":{string},
          "certification.gte":{string},
          "include_adult":{bool},
          "include_video":{bool},
          "page":{number},
          "primary_release_year":{string},
          "primary_release_date.gte":{string},
          "primary_release_date.lte":{string},
          "release_date.gte":{string},
          "release_date.lte":{string},
          "with_release_type":{string},
          "year":{string},
          "vote_count.gte":{string},
          "vote_count.lte":{string},
          "vote_average.gte":{string},
          "vote_average.lte":{string},
          "with_cast":{string},
          "with_crew":{string},
          "with_people":{string},
          "with_companies":{string},
          "with_genres":{string},
          "without_genres":{string},
          "with_keywords":{string},
          "without_keywords":{string},
          "with_runtime.gte":{string},
          "with_runtime.lte":{string},
          "with_original_language":{string},
          "with_watch_providers":{string},
          "watch_region":{string},
          "with_watch_monetization_types":{string} ,
          "without_companies":{string}
      }
      ....more available properties plz visit
      @doc https://developers.themoviedb.org/3/discover/movie-discover
  */
    /********************
     * 2./discover/tv
     * @description Discover TV shows by different types of data like average rating,
     * number of votes, genres, the network they aired on and air dates.
     * @param {any} query
     * @example 'query' are more than 24 available properties.... see more in discover.ts
     * @returns JSON
     * @doc https://developers.themoviedb.org/3/discover/tv-discover
     ********************/
    async GetTVDiscover(query) {
        const token = c_module.GetToken();
        const header = c_module.GetHeader();
        let targetURL = baseURL +
            c_module.Route.DISCOVER +
            c_module.Route.TV +
            `?api_key=${token}`;
        const defauquery = {
            language: 'en-US',
            sort_by: 'popularity.desc',
            page: 1,
            timezone: 'America/New_York',
            with_watch_monetization_types: 'flatrate',
        };
        targetURL += StringByQuery(query === undefined || query === {} ? defauquery : query);
        if (token === 'UnitTest_api_key') {
            return targetURL;
        }
        const data = await axios.get(targetURL, header);
        return data.data;
    }
}
exports.Discover = Discover;
function StringByQuery(query) {
    let result = '';
    const attributes = Object.keys(query);
    attributes.forEach(key => {
        result += `&${key}=` + query[key];
    });
    return result;
}
/*
  1.GET Movie Discover
  2.GET TV Discover
*/
//# sourceMappingURL=discover.js.map